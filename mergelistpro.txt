#include<bits/stdc++.h> 

using namespace std; 

long long int power(long long int x, long long int y, long long int p) 
{ 
    long long int res = 1;    

    x = x % p; 

    while (y > 0) 
    { 
       
        if (y & 1) 
            res = (res*x) % p; 

      
        y = y>>1; // y = y/2 
        x = (x*x) % p; 
    } 
    return res; 
} 


long long int modInverse(long long int n,long long  int p) 
{ 
    return power(n, p-2, p); 
} 

// Returns nCr % p using Fermat's little  
long long int nCrModPFermat(long long int n, long long int r,long long int p) 
{ 

if (r==0) 
    return 1; 

    long long int fac[n+1]; 
    fac[0] = 1; 
    for (long long int i=1 ; i<=n; i++) 
        fac[i] = fac[i-1]*i%p; 

    return (fac[n]* modInverse(fac[r], p) % p * 
            modInverse(fac[n-r], p) % p) % p; 
} 

int main() 
{ 
    long long int t;
    cin>>t;
    while(t--)
    {
          int x,y;
            cin>>x>>y;
    long long int n = x+y, r = x,p=1000000007; 
    cout << nCrModPFermat(n, r, p)<<endl; 
    }
    return 0; 
} 
